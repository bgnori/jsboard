ajaxな(正確にはjsonpな)backgammon board manipuration API

concept:
sessionを使わずにcontextを持つ。
具体的にはgnubg idかxg idをかならず渡す。

i.e. 
move("jHPDAQXgPHgBWA:UQkyAQAAAAAA", "bar/21 24/20 8/4 8/4")
を渡すと

"jHPDAQXgPHgBWA:UQkyAQAAAAAA"がかえってくるなど


a) clickable map(http://w3g.jp/xhtml/dic/map)でeventを発生させる機能を作るためのAPI
b) ゲームのアクションを実装する上で必要な機能を提供するAPI
c) positionを編集する上で必要な機能を提供するAPI


留意:
1) データベースサービスをしたいならこれとは別にデータベースサーバを作る必要がある。
2) ゲームサービスをしたいならこれとは別にゲームサーバを作る必要がある。
- 待合室
- 対戦室


a) clickable map(http://w3g.jp/xhtml/dic/map)でeventを発生させる機能を作るためのAPI
画像とそれの上での各point/checkquer/cubeの座標が必要

<img src="イメージファイルのURI" alt="代替テキスト"
usemap="#マップ名称" width="横幅" height="高さ">
<map name="マップ名称">
<area shape="rect" coords="20,20,60,70"
href="リンク先のURI" alt="代替テキスト">
<area shape="circle" coords="90,30,20"
href="リンク先のURI" alt="代替テキスト">
<area shape="poly" coords="120,30,140,80,160,30,140,40"
href="リンク先のURI" alt="代替テキスト">
</map>
とかになる。
なので、jsでcoordsとurlを生成してあげないといけない。
またユーザの入力後はこの部分全てがさしかわる。

downとupを拾うようにするとdragできるように作ることができる。
moveのための文字列を生成するのはjsの仕事。基本的にはfrom/toの
文字をcatすればよいはず。
右クリックはすきなようにすればいい。


scriptaculousでのdrag
http://gihyo.jp/dev/feature/01/scriptaculous/0012?page=1

なんとなく掴めた。
-> sample/main.html

mapもしくはmapをいれたいdiv要素に対して関数を呼ぶ形式にする。
DOMで書き換えてmapを用意する。

- htmlを送りつける
- jsonpを送りつける


API仮決
High Level
 width, height, css, format, debug
 name..はたぶん不要。globalで同じ名前はあってもいいが、map下でuniqueならよいはず。
 namespace問題

static
backgammonbase.jsboard.positionviewer() // positionの表示
backgammonbase.jsboard.gameviewer() // gameを鑑賞

dynamic
backgammonbase.jsboard.editor() // positionの作成
backgammonbase.jsboard.player() // gameをプレー
backgammonbase.jsboard.explorer() // databaseを使うためのツール。

Low Level

orientation API... sends back coords of items on board
http://image.backgammonbase.com/image?gnubgid=4PPgAQPgc%2BQBIg%3AcAl7AAAAAAAA&height=262&width=341&css=nature&format=jsonp


jQuery
appendはthisを返す。

mat形式のfileの中身を貼り付けるとviewerが動くようにする。


defaultのsizeをどうするのか？
できればサーバと通信して決めるのがよいが、常識的に考えて400x300とかだろう。

とりあえずdivをムーブごとに生成できるようにした。
To Do:
ムーブごとにデータを付けてhover時に絵を差し替える。

Parts化する. (とりあえず、position viewerはここまで)

次はmatのparseか



今日はテストの整理。
mockサーバづくり

jsonp hello world with jQueryができた。 
決めなければいけないこと:
- 標準ではcallbackになっているパラメータ名を決める。 //事実上の関数呼び出し名。...mangleしてくれるライブラリが欲しくなる病
- 引数を決める。
- エラー処理について決める。

仕様に沿ったmock（一部のパラメータのみに正しく反応するサーバ)を用意する。


cssからレイアウトをいじるようにした。AreaMapはまたあとであたえられたエリアから
マップを生成する作業が必要。

次はサーバ作り。

bglibに該当機能が無かったっけ？
bglib.guiかたどるか？
bglib.modelのMoveFactoryあたり？

PartialMoveをMoveFactoryにくわせればよい(append)？
  def move_test(self):を見る限り、そのようだ。
    mf = MoveFactory(b)
としてboardからMoveFactoryをつくり、
PartialMoveを作って食わせればいい。


とりあえずは動いたが・・・。
encodeされて帰ってくるidが短い。

-> encoderがバグっている。

got: ZwAAwGwAAAAAAA:cIkkAAAAAAAA 3/off 1/off 
ZwAAwGwAAAAAAA cIkkAAAAAAAA
3/off
1/off

Traceback (most recent call last):
  File "/usr/lib/python2.4/site-packages/wsgiref/handlers.py", line 92, in run
    self.result = application(self.environ, self.start_response)
  File "server.py", line 63, in my_app
    assert len(p) == 14
AssertionError
shinano.tonic-water.com - - [10/Dec/2009 14:50:00] "GET /?callback=jsonp1260424200673&_=1260424200947&move=3%2Foff+1%2Foff+&gnubgid=ZwAAwGwAAAAAAA%3AcIkkAAAAAAAA HTTP/1.1" 500 59
got: ZwAAwGwAAAAAAA:cIkkAAAAAAAA 4/2 1/off(2) 
ZwAAwGwAAAAAAA cIkkAAAAAAAA
4/2
1/off(2)

Traceback (most recent call last):
  File "/usr/lib/python2.4/site-packages/wsgiref/handlers.py", line 92, in run
    self.result = application(self.environ, self.start_response)
  File "server.py", line 63, in my_app
    assert len(p) == 14
AssertionError
shinano.tonic-water.com - - [10/Dec/2009 14:50:00] "GET /?callback=jsonp1260424200674&_=1260424200952&move=4%2F2+1%2Foff(2)+&gnubgid=ZwAAwGwAAAAAAA%3AcIkkAAAAAAAA HTTP/1.1" 500 59

--> fixed.



moveがせいせいできていない。

got: sGfwgAPbuIEDIA:cIkqAAAAAAAA 24/22 13/9 
sGfwgAPbuIEDIA cIkqAAAAAAAA
24/22
13/9
Traceback (most recent call last):
  File "/usr/lib/python2.4/site-packages/wsgiref/handlers.py", line 92, in run
    self.result = application(self.environ, self.start_response)
  File "server.py", line 55, in my_app
    assert found
AssertionError
shinano.tonic-water.com - - [10/Dec/2009 14:50:00] "GET /?callback=jsonp1260424200641&_=1260424200692&move=24%2F22+13%2F9+&gnubgid=sGfwgAPbuIEDIA%3AcIkqAAAAAAAA HTTP/1.1" 500 59


got: sGfwgAPbuIEDIA:cIkqAAAAAAAA 8/4 6/4 
sGfwgAPbuIEDIA cIkqAAAAAAAA
8/4
Traceback (most recent call last):
  File "/usr/lib/python2.4/site-packages/wsgiref/handlers.py", line 92, in run
    self.result = application(self.environ, self.start_response)
  File "server.py", line 55, in my_app
    assert found
AssertionError
shinano.tonic-water.com - - [10/Dec/2009 14:50:00] "GET /?callback=jsonp1260424200642&_=1260424200704&move=8%2F4+6%2F4+&gnubgid=sGfwgAPbuIEDIA%3AcIkqAAAAAAAA HTTP/1.1" 500 59



got: mOfgASTYzsEAJg:cIkkAAAAAAAA 8/6 8/7(2) 
mOfgASTYzsEAJg cIkkAAAAAAAA
8/6
8/7(2)
Traceback (most recent call last):
  File "/usr/lib/python2.4/site-packages/wsgiref/handlers.py", line 92, in run
    self.result = application(self.environ, self.start_response)
  File "server.py", line 55, in my_app
    assert found
AssertionError
shinano.tonic-water.com - - [10/Dec/2009 14:50:00] "GET /?callback=jsonp1260424200669&_=1260424200918&move=8%2F6+8%2F7(2)+&gnubgid=mOfgASTYzsEAJg%3AcIkkAAAAAAAA HTTP/1.1" 500 59


addmoveしてしまうとdiceがすべて使われてしまう。
pmsが返すmoveをaddしたときにconsumeするdieが変？
再帰からもどったときに状態がrewindされていなかった。


ボードが白くかけてしまう現象
- 原因がよくわからない。
- キャッシュを消してreloadするとかわる。キャッシュもしくは画像生成系が原因だろう。
 firefox側が原因？

重傷では無いのでリリースする方向にいこう。


どうdeployするか？

いままで：
imageserverというuserを作って実行。

apacheのvhostで
- backgammonbase.com
- www.backgammonbase.comに
- image.backgammonbase.com
等に分配
/etc/httpd/conf.d/vhosts/backgammonbase.com

image.backgammonbase.comをport8001に飛ばしている。

memcacheしている
    <IfModule mod_cache.c>
        <IfModule mod_cache.c>
            CacheEnable mem /image
            MCacheSize 300000
#           KByte, 300MByte = 30KB x 10,000 entry
            MCacheMaxObjectCount 12323
            MCacheMaxObjectSize 30000
#           Byte
            MCacheRemovalAlgorithm LRU
        </IfModule>

port 8002をわりあてる？

wsgiをどうするか？
 a) wsgi ref
 b) CherryPy
 c) Django
 d) Pylons
 e) TurboGears
 f) apache mod_wsgi
 g) nginx + wsgi module
どれでもいいのだが、シンプルな奴がいい。

f)はセキュリティ上の理由から避けたい。
g)は興味深いが、httpdがふたつ載ることになる。

e)はすでにやったことがある。serviceがmonolithicになるのが気に入らない。
a)は大丈夫なの？

b), c), d)はわからないことが多い。

面倒だからTGにするか?もしくは気楽に作るa)か.
imageserverの名前が怪しくなるが、気にしないことにしよう。

TGのインスタンスはimageと共有するか？
リソースが無駄臭いが、入れ替えを考えると別にする
api.backgammonbase.com
move.api.backgammonbase.com
onroll.api.backgammonbase.com
edit.api.backgammonbase.com
をとりあえず用意。


package構成
- end user document
- api document
- js code
- server
- css

setup.pyを書く。

/var/www/backgammonbase.com

/var/www/backgammonbase.com/assets
 jsboard.js
 default.css


boardのstyleがpage単位でしか指定できない。

howtouse.txtを追加した。
yamakaze/umikazeでテストか。

umikaze死亡。urakaze作成中



対戦サーバ用のcometを使いたいのでその調査

ゆうきひろしの記事
http://itpro.nikkeibp.co.jp/article/COLUMN/20080220/294242/?ST=develop&P=1

CometとAjaxを利用したチャットサーバの実装 
http://codezine.jp/article/detail/733?p=1

いまはない、Lingrの記事
http://www.atmarkit.co.jp/fwcr/rensai/ajaxwatch12/01.html

Python Comet Server
http://stackoverflow.com/questions/960969/python-comet-server

Python と Twisted できみにも書ける Web サーバ(1)
http://lowlife.jp/yasusii/stories/24.html
Twited Web + Nevowかな。

http://japan.cnet.com/blog/kenn/2006/09/22/entry_lingr_and_comet/
Lingr and Comet
-----
図のように、チャットルームに入ったところでまず全員observeがチャットサーバに対して張りっぱなしになり
（どのチャットサーバにつながるかはロードバランサが動的に決定）、ルームのなかの誰かがsayすれば、
それがウェブサーバ経由でチャットサーバクラスタにnotify（ブロードキャスト）され、
そのチャットサーバクラスタのそれぞれにぶらさがっているクライアントにメッセージが配信され、
すぐまたobserveを発行する、というサイクルを繰り返す仕組みになっています。
-----

cometd (revers proxy)
http://www.cometd.org/
 jQuery用のtoolkitがある。

Nevow
http://divmod.org/trac/wiki/DivmodNevow


comet + JSONP
http://d.hatena.ne.jp/shinichitomita/20070224/1172338685
http://labs.cybozu.co.jp/blog/kazuho/archives/2007/02/keeping_comet_alive.php
http://satoshi.blogs.com/life/2006/10/jsoncomet.html

まずそうなところ; 回避策を考えたくないので、そのような状況を作らないようにする。
- 動的JavaScriptロードの評価順序がブラウザによって違う
- Keepalive with out pipe lining (最近はどうなんだろう？, 記事は2007年当時)
 - pipeline sharing とかできないのかね？
- 同時接続数制限 < 4
- name based virtual hostingだとまずいかも。
 - portに80以外を使えばいい。 3165とか。


うーむ、そもそもにそんなものをローカルにおいていいのか？google waveを使えないか？



socketでサーバをかいてみる。
シングルスレッドで複数のコネクションを受け付けるにはどうすればよいのだろうか？


twistedなら簡単なようだ。
普通のwebサーバ側からconnectionを張るなりなんなりしてmessageをbroadcastしてくれればよい。
http://omake.accense.com/wiki/Twisted%E3%81%AE%E7%9F%AD%E3%81%84%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E9%9B%86


とりあえず、原型になりそうなものはできた。
commitしてリファインしていけそう。


やること：
- 認証の転送 i.e. cookieの共有とその処理
- tableとかを表現する
-- urlのmappingを考える -> client側から考えたほうがらくでは？


BaseServer/TCPServer/BaseHTTPServer

    def serve_forever(self):
        """Handle one request at a time until doomsday."""
        while 1:
            self.handle_request()

    def handle_request(self):
        """Handle one request, possibly blocking."""
        try:
            request, client_address = self.get_request()
        except socket.error:
            return
        if self.verify_request(request, client_address):
            try:
                self.process_request(request, client_address)
            except:
                self.handle_error(request, client_address)
                self.close_request(request)


    def finish_request(self, request, client_address):
        """Finish one request by instantiating RequestHandlerClass."""
        self.RequestHandlerClass(request, client_address, self)

    def __init__(self, server_address, RequestHandlerClass):
        """Constructor.  May be extended, do not override."""
        self.server_address = server_address
        self.RequestHandlerClass = RequestHandlerClass
なので、
基本的にはRequestHandlerClassをnewしてあげればいい。
WSGIServerを継承しててきとうに書き換えてあげる。


class BaseRequestHandler:
    def __init__(self, request, client_address, server):
        self.request = request
        self.client_address = client_address
        self.server = server
        try:
            self.setup()
            self.handle()
            self.finish()
        finally:
            sys.exc_traceback = None    # Help garbage collection
が走らない？

parse_requestがFalseを返している。



げ、wsgiのBaseHandlerとStreamHandlerは系統が違う！
-> そんなことはなかった。file seek(0)しわすれ。

js/html側：submitのハンドラでfalseを返し、htmlのsubmit動作を抑制する必要がある。



ServerInstanceを何回も生成したくない。
元のコードではハンドラの生成・解放とrequestの処理完了と同じだが、
生成してpublishを待つ必要がある。

requestをparseしないとなにをsubscribeしてもらいたいのかわからないので振り分けができない。
subscribe側でwsgiのinterfaceを維持するには無理がある。


requestをparseしなんかする部分と、kickと情報をもらってresponseを作る部分に分割する。
そうすると
runじゃだめ。

BaseHandlerは作ってすぐ寿命が尽きる。寿命が変わるのでいい感じはしない。
__init__を書き換えることになる。

serverにHandlerインスタンスを複数保持している必要がある。

response headerを生成してなかった。
Transportにwriteしてなかった。
-- CometHandlerはHTTPHandler持つ必要がある。(HTTPを理解するために)
-- CometHandlerはタイミングしかあずかり知らない。


まずはBayeuxにでてくるのChannelっぽいものを実装しよう
Channels are identified by names that are styled as the absolute path
component of a URI without parameters as defined by RFC2396. 



/meta
はだるいなぁ。

[
  {
    "channel": "/some/name",
    "clientId": "83js73jsh29sjd92",
    "data": { "myapp" : "specific data", value: 100 }
  }
]

メッセージが連射されると、Requestがくる前にmessageをpublishする可能性があって、
回避するためにはQueueingが必要になる。つまりそれはなんらかのsession管理をサーバ側で
しないといけないことを意味する。

QueueingするならXML-RPCのマルチリクエストみたいなことをしたくなる訳で、

[
  {
    "channel": "/some/name",
    "clientId": "83js73jsh29sjd92",
    "data": { "myapp" : "specific data", value: 100 }
  },
  {
    "channel": "/other/name",
    "clientId": "73jsadw309eew558",
    "data": { "myapp" : "specific data", value: 100 }
  }
]
とかしたいわけだな。なので、payloadが配列になる。


いくつかinsightがありそうなので、bayeuxの翻訳をやってから作業でもいいかもしれない。

http://wiki.livedoor.jp/daffy1/d/Bayeux%20Protocol%CB%DD%CC%F5
は途中で挫折している。


順番としては, 
- channel/pathの実装
- sessionの実装
-- queueingの実装(sessionに対して)
- chat appliの実装(lobby, room, direct message)
かな。


なんだろう、Bayeuxはclientをhandshakeで認証する方向で作られている。
sessionを作る方向ではない？

あすは6
6.2. callback-polling
と
meta message
かな。

なんだろー。UDPみたいなconnectionlessなものを作りたいなぁ。

messageをhandleする関数をCometAppと呼ぶ(WSGIのapplicationになぞらえて)
routeとかのデザインも調べるべし。


> なんだろー。UDPみたいなconnectionlessなものを作りたいなぁ。
ということは、ChannelとMessageのみでできている。

Messageを入れ子にして、そこに認証とかをつっこむ？
clientにidを与えないと、messageを送り返せない。

channel to channelで表現できないか？


mapper
/session/id=? <---> http req/res
... life time?
--> CometHandlerにmessageをQueueingする
--> http handlerをCometHandleに追加する。
-- ここはhttpの中身をみることができるので、cookieなりなんなり。
-- 問題はajaxでcookieをつけるのはまともなことなのか？
===== http://plugins.jquery.com/project/Cookie
-- cookieをほかの部分と共用したい。つまりサイトとして。

んー。反復による攻撃がいやだなぁ。
step1. httpsでkeyをuserからもらう。
step2. サーバがまとめてたくさんのchallegeを送る。(bulk)
step3. clientはhttp requestを送るときに、challengeを一個えらんでkeyとhashしresponseを生成する。
step4. clientは生成したresponseとchallengeのペアをcookieにセットして送信する。
step5. サーバが検証する。
一般的なsession管理からみるとover spec


sha1とかの計算は重くないのか？
cookieにする理由：urlに入れたくない.payloadに入れるのはOK
送信のタイミングがやばくないか？
- userの操作でページ遷移した場合


- 内部のidをclientに公開する必要はないが、httpのsessionとmapする必要がある。

route
Channel <---> Channel

appはChannelに貼り付ける。

--- cookieの処理法
 cookies = self.parseCookies(environment.get("HTTP_COOKIE", ""))
    def parseCookies(self, s):
        cookies = {}
        for x in [t.strip() for t in s.replace(",", ":").split(":")]:
            if x == "":
                continue
            key,value = x.split("=", 1)
            cookies[key] = value
        return cookies


chat pyと分ける意味なし。
-> 対応
WSGIっぽくするの意味なし。
publishは解体吸収?
  
  handleしたあと単にhttp
  responseのhandlerを覚えておくだけじゃなくてsessionと結びつけて管理しないといけない。


CometHandler(WSGIRequestHandler)の存在意義
- protocolとhttp handlerの橋渡し。
- responseをholdする
- CometServerから呼び出される。

SplittedHandler(SimpleHandler)の存在意義
- wsgiのhandlerの機能を引っ張ってくる。 <- WSGIServerと使いたい。
- publishかsubscribeかを隠蔽する。

CometServerの存在意義
- WSGIの規約にしたがったぽいものを作る。
- http serverである。



気づいたこと
- 名前の対称性が壊れてる! CometServer <-> SplittedHandler/CometHandler(!!)
- WSGIはいらないから、SplittedHandlerとCometServerは継承関係が疑問
-- server_bindはなんか変なことに
- session管理はserverに追加したい。



まずfakeを消す。-> done
requestとresponseの分離にかなりの手間をかけた。
->分離しないとserverの寿命がおかしなことになる。transportの関係上、request毎にサーバを生成するコードになってしまう。

PublishServerとSubscribeServerが分離しているから面倒？
現状ServerはHandlerもPeerも１つしかもてない。
env等を渡すときに名前を変えれば１つにできるかも
Handler側でget_environを変えないといけない。
serverをsubclassするより、hanlderをsubclass化するほうが健全


とりあえず終わった。
- ajaxをPOST化

エラーケースでrequestのhandlerを途中で抜ける場合に書きにくい。

ajax側でPOST methodを指定したら、OPTIONSが飛んでくる！
http://stackoverflow.com/questions/1099787/jquery-ajax-post-sending-options-as-requestmethod-in-firefox


same origin policy抵触とのことだが？

https://developer.mozilla.org/ja/AJAX/Getting_Started
---
第 2 引数は、リクエストを送るページの URLです。セキュリティ上の問題から、他のドメインのページを読むことはできません。つまり、すべてのページに対して同一のドメイン名を利用しないと、open()を呼び出したときに「権限エラー」を受け取ることになるということです。よくある落とし穴は、サイトにdomain.tld でアクセスしながら、www.domain.tld
でページを読み込もうとすることです。 
---
んー。GETがOKでPOSTがだめなんて変すぎ。

http://www.petefreitag.com/item/703.cfm
- ヘッダを使えばsame origin policyに関して指示できる。


file://とlocalhostで問題が起きている？
-> yes.
<script>でくっつけるのにPOSTは変
ということで、当面はGET.
- 容量で問題が起きたらなんか考える。
- 検索エンジンからのrequestはrobots.txtで蹴る。


正確には未知のサーバにいきなりPOSTするのはだめなので、preflight requestが行われる。
https://developer.mozilla.org/Ja/HTTP_access_control#Preflighted_requests
なので、sourceのhtmlとPOSTの対象を同じサーバに置くか、ほかのところからの
POSTを受け付けるためにOPTIONSに対応するかの２択

いずれにせよ、テストの手法を変えた方が無難だろう。

reverse proxyを使って組み合わせるのが一番楽そう。
:8080
- static
- non comet app
- comet publish -> comet.api.backgammonbase.com:3165

:3124 subscribe
:3165 publish

apacheを使う。deployでも使うだろうから。
 -f file            : specify an alternate ServerConfigFile

wsgi.inputが正しくとれない。
dataReceivedで全部のデータがとれているわけではない。
see /usr/lib64/python2.4/site-packages/twisted/web2/wsgi.py
see /usr/lib64/python2.4/site-packages/twisted/web2/channel/http.py

とりあえず、dataReceivedでbufferに書き込み、
httpとしてContentがそろっているかどうかを出来合いのコードでチェックし、
できていたらserver.hanlde_xxx_requestを呼ぶ用にする。

そろっているかどうかのチェックがたくさん走って重いかもしれないが、とりあえずは気にしない。

Transport Levelではすべてデータがきている。
environを作ったときに何かがおかしい？

bodyの部分だけが残るはずなのにheaderも残っているから変。
seek関係とみた。


channelとかsessionの実装

channelとurlの関係
http://comet.backgammonbase.test:8080/channel

channelをsubscribeする
channelをunsubscribeする
channelの一覧を取得する
channelを複数同時表示する。
channelの表示を動的に追加する。

なーんか再帰的にできるといいなぁ。

まずはhtml上でのidをうまく振ること。
再帰的な操作を用意すること

chatのウィジット化
まずはdivで矩形を出すやつを作る。



a) 空データ+/channel/?action=subscribe 
 merit browserでテストできる。(postも)
 demerit appli側でのurl設計が制限される。
b) /channel + {action:'subscribe'} 
 merit browserでテストできる。(getのみ)
 demerit url設計が比較的制限されない。

c) / + {channel:channel, action:'subscribe'}
 merit: シンプル
 demerit appli側でのurl設計が制限されない。

視点)
jsがサポートされなブラウザでの表示と一貫性を持たせやすいのはどれか？
a)


とりあえずa)でいってみよう。

    RewriteCond %{REQUEST_METHOD} =POST
    RewriteRule (.+) http://127.0.0.1:3124/$1 [P]
    ProxyPassReverse / http://127.0.0.1:3124/


cometdの作りを変える必要がある。
- broadcast/listen系 (いままでのsubscribe)
- command系(いままのでpublish)


channelの購読関係の作りがアレゲだなぁ。
- session(cookie)からhandler検索できるようにしないといけない。
-- sessionとhandlerは1:1だが、handlerがいないときがある。
- channelとhandlerはn:1
--> channelを購読すると実はsessionに渡されるべき。

ということで、sessionの実装が必要だ。

いつsessionを与えるかが問題だが、loginさせる必要が出てくる。
Login -> set cookie -> ウマー。
(post)

command=loginかぁ
んー。commandのsplit handlerは作りが微妙な気がする。
return valueを見てhandle_commandでがんばることが多い。
このへんの書き直しはsessionを実装してから。


ぐちゃぐちゃだ。
web側をオリジナルのハンドラでやっていると寿命がちぢみすぎるので、WSGIにする。
comet側との連携をどうとるかが問題

a) cometとwebを別processにする
- session共有が面倒。
- scaleさせやすい？
- process間でのやりとりをどうするのか？XML-RPC?

b) cometとwebを同じprocessにする
- session共有が楽。
- scaleするか不明
- webとcometのやりとりはmethod呼び出しで終わり。

WSGIでかければそれほどひどいことにはならないはず。
あとでの乗り換えが可能なはずだから。

web側でappを書くときに参照したいよね。クロージャでもobjectでもいいけど。
個人的にはクロージャか？

sessionの作り方はわかったが、file構成がやばいかも。


cometのdo_responseにrequest objectを渡すようにすればよいかもしれない。
cookieを隠したい?でもそれをやるとwerkzeugに依存してしまう。

do_requestを失敗させたいときはどうするのか？
おとなしくobject化したほうが良さそう。
DualServerやSessionがさわりにくい。


session idは必ずhashable.
do_responseは常に同じではないか？



